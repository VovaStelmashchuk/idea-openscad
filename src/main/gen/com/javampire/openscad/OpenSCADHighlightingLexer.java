/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.javampire.openscad.psi.OpenSCADTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad_highlighter.flex</tt>
 */
class OpenSCADHighlightingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDE_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\17\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\23"+
    "\10\1\26\1\40\3\10\1\23\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\26\3\10\2"+
    "\46\1\26\1\47\1\50\1\0\1\51\5\10\1\52\3\0\1\53\1\54\13\10\1\55\1\44\1\56\1"+
    "\57\1\0\1\60\1\26\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\26\1\0\1\66"+
    "\3\10\1\52\1\67\1\22\2\10\1\64\1\70\1\71\1\72\2\26\3\10\1\73\10\26\1\74\1"+
    "\27\6\26\1\75\2\0\1\76\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\2\40\1\103"+
    "\1\104\1\105\2\10\1\74\1\106\1\107\1\110\1\111\1\61\1\112\1\102\1\0\1\113"+
    "\1\50\1\103\1\114\1\105\2\10\1\74\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\1\124\1\26\1\103\1\35\1\34\2\10\1\74\1\125\1\107\1\44\1\126\1\127\1\26"+
    "\1\102\1\0\1\41\1\26\1\103\1\104\1\105\2\10\1\74\1\125\1\107\1\110\1\120\1"+
    "\123\1\112\1\102\1\0\1\41\1\26\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1"+
    "\135\1\136\1\137\1\140\1\26\1\123\1\0\1\26\1\41\1\103\1\31\1\74\2\10\1\74"+
    "\1\141\1\142\1\143\1\137\1\144\1\25\1\102\1\0\2\26\1\145\1\31\1\74\2\10\1"+
    "\74\1\141\1\107\1\143\1\137\1\144\1\32\1\102\1\0\1\146\1\26\1\145\1\31\1\74"+
    "\4\10\1\147\1\143\1\150\1\61\1\26\1\102\1\0\1\26\1\37\1\145\1\10\1\23\1\37"+
    "\2\10\1\34\1\151\1\23\1\152\1\153\1\0\2\26\1\154\1\26\1\40\5\10\1\155\1\156"+
    "\1\157\1\76\1\0\1\160\4\26\1\161\1\162\1\163\1\40\1\164\1\165\1\155\1\166"+
    "\1\167\1\170\1\0\1\171\4\26\1\127\2\26\1\160\1\0\1\160\1\172\1\173\1\10\1"+
    "\40\3\10\1\27\1\43\1\0\1\143\1\174\1\0\1\43\3\0\1\47\1\175\7\26\5\10\1\52"+
    "\1\0\1\176\1\0\1\160\1\64\1\177\1\200\1\201\1\202\1\10\1\203\1\204\1\0\1\170"+
    "\4\10\1\35\1\21\5\10\1\205\51\10\1\132\1\23\1\132\5\10\1\132\4\10\1\132\1"+
    "\23\1\132\1\10\1\23\7\10\1\132\10\10\1\206\4\26\2\10\2\26\12\10\1\27\1\26"+
    "\1\40\114\10\1\104\2\10\1\40\2\10\1\46\11\10\1\131\1\127\1\26\1\10\1\31\1"+
    "\207\1\26\2\10\1\207\1\26\2\10\1\210\1\26\1\10\1\31\1\211\1\26\6\10\1\212"+
    "\3\0\1\213\1\214\1\0\1\160\3\26\1\215\1\0\1\160\13\10\1\26\5\10\1\216\10\10"+
    "\1\217\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\123\1\0\3\10\1\217\1\27\1\26\5\10"+
    "\1\113\2\0\1\54\1\160\1\0\1\160\4\26\2\10\1\157\1\2\6\10\1\174\1\76\3\0\1"+
    "\110\1\0\1\160\1\0\1\160\1\42\13\26\1\220\5\10\1\212\1\0\1\220\1\113\1\0\1"+
    "\160\1\26\1\221\1\2\1\26\1\222\3\10\1\101\1\201\1\0\1\66\4\10\1\64\1\0\1\2"+
    "\1\26\4\10\1\212\2\0\1\26\1\0\1\223\1\0\1\66\3\10\1\217\12\26\1\224\2\0\1"+
    "\225\1\226\1\26\30\10\4\0\1\76\2\26\1\75\42\10\2\217\4\10\2\217\1\10\1\227"+
    "\3\10\1\217\6\10\1\31\1\167\1\230\1\27\1\231\1\113\1\10\1\27\1\230\1\27\1"+
    "\26\1\221\3\26\1\232\1\26\1\42\1\127\1\26\1\233\1\26\1\47\1\234\1\41\1\42"+
    "\2\26\1\10\1\27\3\10\1\46\2\26\1\0\1\47\1\235\1\0\1\236\1\26\1\237\1\37\1"+
    "\151\1\240\1\30\1\241\1\10\1\242\1\243\1\244\2\26\5\10\1\127\116\26\5\10\1"+
    "\23\5\10\1\23\20\10\1\27\1\245\1\246\1\26\4\10\1\35\1\21\7\10\1\42\1\26\1"+
    "\61\2\10\1\23\1\26\10\23\4\0\5\26\1\42\72\26\1\243\3\26\1\40\1\203\1\240\1"+
    "\27\1\40\11\10\1\23\1\247\1\40\12\10\1\205\1\243\4\10\1\217\1\40\12\10\1\23"+
    "\2\26\3\10\1\46\6\26\170\10\1\217\11\26\71\10\1\27\6\26\21\10\1\27\10\26\5"+
    "\10\1\217\41\10\1\27\2\10\1\0\1\246\2\26\5\10\1\157\1\75\1\250\3\10\1\61\12"+
    "\10\1\160\3\26\1\42\1\10\1\37\14\10\1\251\1\113\1\26\1\10\1\46\11\26\1\10"+
    "\1\252\1\253\2\10\1\52\2\26\1\127\6\10\1\113\1\26\1\66\5\10\1\212\1\0\1\47"+
    "\1\26\1\0\1\160\2\0\1\66\1\50\1\0\1\66\2\10\1\64\1\170\2\10\1\157\1\0\1\2"+
    "\1\26\3\10\1\27\1\77\5\10\1\52\1\0\1\236\1\42\1\0\1\160\4\26\5\10\1\101\1"+
    "\76\1\26\1\253\1\254\1\0\1\160\2\10\1\23\1\255\6\10\1\200\1\256\1\216\2\26"+
    "\1\257\1\10\1\52\1\260\1\26\3\261\1\26\2\23\22\26\4\10\1\52\1\262\1\0\1\160"+
    "\64\10\1\113\1\26\2\10\1\23\1\263\5\10\1\113\40\26\55\10\1\217\15\10\1\25"+
    "\4\26\1\23\1\26\1\263\1\264\1\10\1\74\1\23\1\167\1\265\15\10\1\25\3\26\1\263"+
    "\54\10\1\217\2\26\10\10\1\37\6\10\5\26\1\10\1\27\2\0\2\26\1\76\1\26\1\134"+
    "\2\26\1\243\3\26\1\41\1\31\20\10\1\266\1\233\1\26\1\0\1\160\1\40\2\10\1\114"+
    "\1\40\2\10\1\46\1\267\12\10\1\23\3\37\1\270\1\271\2\26\1\272\1\10\1\141\2"+
    "\10\1\23\2\10\1\273\1\10\1\217\1\10\1\217\4\26\17\10\1\46\10\26\6\10\1\27"+
    "\20\26\1\274\20\26\3\10\1\27\6\10\1\127\5\26\3\10\1\23\2\26\3\10\1\46\6\26"+
    "\3\10\1\217\4\10\1\113\1\10\1\240\5\26\23\10\1\217\1\0\1\160\52\26\1\217\1"+
    "\74\4\10\1\35\1\275\2\10\1\217\25\26\2\10\1\217\1\26\3\10\1\25\10\26\7\10"+
    "\1\267\10\26\1\276\1\75\1\141\1\40\2\10\1\113\1\117\4\26\3\10\1\27\20\26\6"+
    "\10\1\217\1\26\2\10\1\217\1\26\2\10\1\46\21\26\11\10\1\127\66\26\1\222\6\10"+
    "\1\0\1\76\3\26\1\123\1\0\2\26\1\222\5\10\1\0\1\277\2\26\3\10\1\127\1\0\1\160"+
    "\1\222\3\10\1\157\1\0\1\143\1\0\10\26\1\222\5\10\1\52\1\0\1\300\1\26\1\0\1"+
    "\160\24\26\5\10\1\52\1\0\1\26\1\0\1\160\46\26\55\10\1\23\22\26\14\10\1\46"+
    "\63\26\5\10\1\23\72\26\7\10\1\127\130\26\10\10\1\27\1\26\1\101\4\0\1\76\1"+
    "\26\1\61\1\222\1\10\14\26\1\25\153\26\1\301\1\302\2\0\1\303\1\2\3\26\1\304"+
    "\22\26\1\305\67\26\12\10\1\31\10\10\1\31\1\306\1\307\1\10\1\310\1\141\7\10"+
    "\1\35\1\311\2\31\3\10\1\312\1\167\1\37\1\74\51\10\1\217\3\10\1\74\2\10\1\205"+
    "\3\10\1\205\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\74\3\10\1\74\2"+
    "\10\1\205\1\313\6\0\1\141\3\10\1\161\1\40\1\205\1\314\1\237\1\315\1\161\1"+
    "\227\1\161\2\205\1\122\1\10\1\34\1\10\1\113\1\316\1\34\1\10\1\113\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\217\74\26\1\121\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\26\1\4\1\2\1\1\1\5\1\3\6\26\4\0\1\4\1\76\1\36\1\74\1\25\1\63\1\77\1\35"+
    "\1\66\1\67\1\10\1\33\1\61\1\62\1\31\1\7\2\30\1\56\7\30\1\65\1\60\1\75\1\24"+
    "\1\6\1\64\1\0\4\25\1\32\15\25\1\72\1\34\1\73\1\0\1\43\1\0\1\37\1\53\1\21\1"+
    "\13\1\16\1\17\1\42\1\50\1\23\1\52\1\46\1\15\1\11\1\20\1\12\1\51\1\55\1\41"+
    "\1\40\1\22\1\14\1\57\1\47\1\44\1\54\1\45\1\70\1\100\1\71\1\0\6\26\1\27\2\26"+
    "\2\0\4\25\4\0\1\25\2\0\1\26\7\0\1\25\4\0\1\25\5\0\7\25\1\0\2\25\4\0\4\25\16"+
    "\0\5\25\7\0\1\25\1\0\1\25\1\0\5\25\1\0\2\25\6\0\1\25\1\0\3\25\1\0\1\25\1\0"+
    "\4\25\1\0\13\25\1\0\3\25\1\0\5\26\2\0\6\25\1\0\7\25\1\0\1\25\15\0\1\25\1\0"+
    "\15\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26\3\25\5\0\5\26\6\0\1\25\4\0\3\26"+
    "\5\0\3\25\7\26\4\0\2\25\1\26\13\25\1\0\1\25\7\26\2\25\2\26\1\0\4\26\2\25\2"+
    "\26\3\25\2\0\1\25\7\0\1\26\1\25\1\26\6\25\3\26\2\0\11\25\3\26\1\25\6\0\2\26"+
    "\6\25\4\26\2\25\2\0\2\26\1\25\11\26\1\25\3\26\1\25\5\26\2\0\1\25\3\26\4\0"+
    "\1\25\1\0\6\25\4\0\13\26\1\0\4\26\6\25\3\26\1\25\2\26\1\25\7\26\2\25\2\26"+
    "\2\0\2\26\1\0\3\26\1\0\10\25\2\0\2\25\2\0\6\25\1\0\1\25\3\0\4\25\2\0\1\26"+
    "\1\25\7\26\2\0\2\26\2\0\3\26\1\25\5\0\2\25\1\0\5\25\4\0\3\25\4\0\2\25\1\0"+
    "\2\25\1\0\2\25\1\0\2\25\2\0\1\26\1\0\5\26\4\0\2\26\2\0\3\26\3\0\1\26\7\0\4"+
    "\25\1\0\1\25\7\0\4\26\3\25\1\26\2\0\1\25\1\0\2\25\1\0\3\25\2\26\1\0\3\26\2"+
    "\0\1\25\11\0\1\26\1\25\1\0\6\25\3\0\3\25\1\0\4\25\3\0\2\25\1\0\1\25\1\0\2"+
    "\25\3\0\2\25\3\0\2\25\4\0\5\26\3\0\3\26\1\0\4\26\2\0\1\25\6\0\1\26\4\25\1"+
    "\0\5\25\3\0\1\25\7\26\1\0\2\26\5\0\2\26\3\0\2\26\1\0\3\25\1\0\2\25\5\0\3\25"+
    "\2\0\1\25\3\26\1\0\4\26\1\25\1\0\4\25\1\0\1\25\4\0\1\26\4\0\6\26\1\0\1\26"+
    "\3\0\2\26\4\0\1\25\1\26\2\25\7\26\4\0\10\25\3\26\7\0\2\25\1\0\1\25\2\0\2\25"+
    "\1\0\1\25\2\0\1\25\6\0\4\25\1\0\3\25\1\0\1\25\1\0\1\25\2\0\2\25\1\0\3\25\2"+
    "\26\1\0\2\26\1\25\2\0\5\25\1\0\1\25\1\0\6\26\2\0\2\26\2\0\4\25\5\0\1\26\1"+
    "\0\1\26\1\0\1\26\4\0\2\26\5\25\3\26\6\0\1\26\1\0\7\26\1\25\2\26\4\25\3\26"+
    "\1\25\3\26\2\25\7\26\3\25\4\26\5\25\14\26\1\25\1\26\3\25\1\0\7\25\2\0\3\26"+
    "\2\25\3\26\3\0\2\25\2\26\4\0\1\25\1\0\2\26\4\0\4\25\10\26\3\0\1\25\3\0\2\25"+
    "\1\26\5\0\3\26\2\0\1\25\1\26\1\25\5\0\6\25\2\0\5\26\3\25\3\0\10\26\5\25\2"+
    "\26\3\0\3\25\3\26\1\0\5\26\4\25\1\26\4\25\3\26\2\25\2\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\2\0\3\25\1\0\6\25\2\0\2\25\2\1\5\26\5\0\1\25\5\0\6\26\1\0\1"+
    "\26\3\0\4\26\11\0\1\25\4\0\1\25\1\0\5\25\2\0\1\25\1\0\4\25\1\0\3\25\2\0\4"+
    "\25\5\0\5\25\4\0\1\25\4\0\4\25\3\26\2\25\5\0\2\26\2\0\3\25\6\26\1\0\2\25\2"+
    "\0\4\25\1\0\2\25\1\26\3\25\1\26\4\25\1\26\10\25\2\26\4\0\1\25\1\26\4\0\1\26"+
    "\5\25\2\26\3\0\3\25\4\0\3\25\2\26\2\0\6\25\1\0\3\26\1\0\2\26\5\0\5\25\5\0"+
    "\1\25\1\26\3\25\1\0\2\25\1\0\7\25\2\0\1\26\6\0\2\25\2\0\3\25\3\0\2\25\3\0"+
    "\2\25\2\0\3\26\4\0\3\25\1\0\2\25\1\0\1\25\5\0\1\26\2\0\1\25\3\0\1\25\2\0\2"+
    "\25\3\26\1\0\2\26\1\0\3\26\2\0\1\26\2\0\1\26\4\25\10\0\5\26\3\0\6\26\2\0\3"+
    "\26\2\0\4\26\4\0\3\26\5\0\1\25\2\0\2\25\2\0\4\25\1\0\4\25\1\0\1\25\1\0\6\25"+
    "\2\0\5\25\1\0\4\25\1\0\4\25\2\0\2\26\1\0\1\25\1\0\1\25\5\0\1\25\1\0\1\25\1"+
    "\0\3\25\1\0\3\25\1\0\3\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\13\6\1\7"+
    "\1\6\1\10\1\11\1\12\1\13\1\14\6\6\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\1\1\34"+
    "\1\2\1\35\1\36\5\0\1\37\1\40\1\41\12\6"+
    "\1\42\24\6\1\43\1\6\1\44\1\0\1\10\1\0"+
    "\1\13\1\0\1\14\23\6\1\45\1\46\1\47\1\50"+
    "\6\0\1\40\2\0\1\41\1\51\2\6\1\42\5\6"+
    "\1\52\1\6\1\53\4\6\1\54\22\6\1\10\1\0"+
    "\23\6\11\0\3\40\4\0\2\51\12\6\1\55\1\56"+
    "\7\6\1\57\4\6\1\42\13\6\1\60\4\6\5\0"+
    "\1\40\2\0\2\40\1\61\2\40\2\0\1\61\1\0"+
    "\1\41\1\0\5\6\1\62\3\6\1\63\1\56\15\6"+
    "\5\0\1\61\2\0\2\40\2\0\1\64\10\6\1\56"+
    "\2\6\1\60\5\6\3\0\2\40\2\0\10\6\1\65"+
    "\4\6\1\42\3\0\2\40\2\0\4\6\1\66\5\6"+
    "\2\0\1\61\1\40\1\61\1\0\7\6\1\61\1\0"+
    "\1\40\1\0\3\6\1\0\4\6\1\60\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0104\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0104\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u0104\0\u0104\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0104\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0555\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u0555\0\u130b"+
    "\0\u0104\0\u134c\0\u138d\0\u13ce\0\u0104\0\u140f\0\u0104\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u0104\0\u0104\0\u0104\0\u0104\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74"+
    "\0\u1db5\0\u0555\0\u1df6\0\u0555\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u0555\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u23cd\0\u240e\0\u244f\0\u2490"+
    "\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u0104\0\u29a4\0\u29e5\0\u29e5\0\u1a27"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u0104\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u0555\0\u0555\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u0555\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u0555\0\u34d0"+
    "\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8"+
    "\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u0aeb\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u0104\0\u3962\0\u0104\0\u39a3\0\u39e4\0\u3a25"+
    "\0\u3a66\0\u3aa7\0\u3ae8\0\u0555\0\u3b29\0\u3b6a\0\u3bab\0\u0555"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb"+
    "\0\u3ffc\0\u403d\0\u407e\0\u1a68\0\u40bf\0\u4100\0\u4141\0\u4182"+
    "\0\u41c3\0\u4204\0\u0555\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4308\0\u4510"+
    "\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718"+
    "\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920"+
    "\0\u4961\0\u49a2\0\u49e3\0\u0555\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7"+
    "\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef"+
    "\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u0555\0\u4e34\0\u4e75\0\u4eb6"+
    "\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u2aa8\0\u4ffb\0\u2b6b\0\u503c"+
    "\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u3697"+
    "\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b"+
    "\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\5\1\6\1\30\1\31\1\27"+
    "\1\32\1\5\1\33\1\34\1\35\1\36\1\37\6\27"+
    "\1\40\1\41\4\27\1\30\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\5\65"+
    "\1\66\20\64\1\65\45\64\1\67\3\64\4\0\2\3"+
    "\1\0\1\70\107\0\1\71\1\0\1\72\3\0\1\73"+
    "\156\0\5\6\21\0\1\6\52\0\3\6\2\7\1\0"+
    "\1\74\17\0\1\6\75\0\1\75\63\0\1\76\1\77"+
    "\101\0\1\27\1\100\1\27\1\101\6\27\1\102\1\0"+
    "\4\27\1\0\1\27\4\0\1\103\20\27\32\0\6\27"+
    "\1\104\4\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\12\27\1\105\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\7\27\1\106\3\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\27\1\107\17\27\32\0\1\27\1\110"+
    "\3\27\1\111\1\27\1\112\2\27\1\113\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\4\27\1\114\3\27"+
    "\1\115\2\27\1\0\4\27\1\0\1\27\4\0\5\27"+
    "\1\116\13\27\32\0\1\27\1\117\1\27\1\120\1\121"+
    "\6\27\1\0\4\27\1\0\1\27\4\0\1\122\20\27"+
    "\32\0\1\27\1\123\11\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\1\27\1\124\1\27\1\125\1\27"+
    "\1\126\4\27\1\127\1\0\4\27\1\0\1\27\4\0"+
    "\2\27\1\130\6\27\1\131\3\27\1\132\3\27\32\0"+
    "\5\27\1\133\5\27\1\0\4\27\1\0\1\27\4\0"+
    "\1\134\1\27\1\135\16\27\32\0\1\136\5\27\1\137"+
    "\1\140\3\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\45\0\1\141\65\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\37\0\1\142\11\0\1\30\1\143\1\142"+
    "\23\0\1\30\52\0\1\143\25\0\1\143\22\0\34\33"+
    "\1\144\1\145\43\33\34\34\1\146\1\34\1\147\42\34"+
    "\11\0\10\27\1\150\1\151\1\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\27\1\152\12\27\1\153\4\27\32\0"+
    "\3\27\1\154\1\27\1\155\2\27\1\156\1\157\1\160"+
    "\1\0\4\27\1\0\1\27\4\0\12\27\1\161\3\27"+
    "\1\162\2\27\32\0\1\27\1\163\3\27\1\164\5\27"+
    "\1\0\4\27\1\0\1\27\4\0\1\165\20\27\32\0"+
    "\3\27\1\166\7\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\1\27\1\167\11\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\170\1\27\1\171\16\27\32\0\5\27"+
    "\1\172\5\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\45\0\1\173\100\0\1\174\153\0\1\175\101\0\1\176"+
    "\6\64\1\0\66\64\1\0\4\64\5\65\1\0\20\64"+
    "\1\65\45\64\1\0\3\64\7\0\1\177\106\0\1\200"+
    "\75\0\1\201\67\0\5\73\3\0\13\202\1\0\1\202"+
    "\1\203\1\73\1\203\1\0\1\202\4\0\17\202\1\203"+
    "\1\202\30\0\1\204\71\0\1\76\1\205\1\206\1\207"+
    "\1\76\1\205\21\76\1\205\51\76\10\210\1\211\70\210"+
    "\11\0\2\27\1\212\10\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\4\27\1\213\6\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\7\27\1\214\3\27"+
    "\1\0\4\27\1\0\1\27\4\0\2\27\1\215\16\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\5\27"+
    "\1\112\13\27\32\0\6\27\1\216\4\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\6\27\1\217\4\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\2\27"+
    "\1\220\7\27\1\221\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\5\27\1\222\5\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\1\27\1\223\11\27\1\0"+
    "\4\27\1\0\1\27\4\0\3\27\1\112\15\27\32\0"+
    "\7\27\1\112\1\27\1\224\1\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\7\27\1\225\3\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\4\27\1\226"+
    "\6\27\1\0\4\27\1\0\1\27\4\0\1\27\1\227"+
    "\17\27\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\11\27\1\230\7\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\12\27\1\112\6\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\2\27\1\231\16\27\32\0"+
    "\7\27\1\232\3\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\1\27\1\233\11\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\4\27\1\234\6\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\2\27\1\235\16\27\32\0"+
    "\4\27\1\236\2\27\1\237\3\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\27\1\112\17\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\14\27\1\240\4\27\32\0"+
    "\12\27\1\241\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\2\27"+
    "\1\242\16\27\32\0\1\27\1\243\11\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\12\27\1\244\1\0"+
    "\4\27\1\0\1\27\4\0\2\27\1\112\16\27\32\0"+
    "\4\27\1\245\6\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\5\27\1\246\13\27\32\0\7\27\1\112\3\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\3\27\1\247"+
    "\7\27\1\0\4\27\1\0\1\27\4\0\1\250\20\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\12\27"+
    "\1\251\6\27\32\0\10\27\1\252\1\253\1\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\51\0\1\254\2\0"+
    "\1\255\22\0\1\254\3\0\1\255\34\0\1\142\11\0"+
    "\1\143\1\0\1\142\23\0\1\143\22\0\101\33\101\34"+
    "\11\0\1\27\1\153\11\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\1\256\20\27\32\0\12\27\1\134\1\0\4\27"+
    "\1\0\1\27\4\0\1\27\1\257\17\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\1\27\1\112\17\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\2\27"+
    "\1\260\16\27\32\0\4\27\1\261\6\27\1\0\4\27"+
    "\1\0\1\27\4\0\1\262\20\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\1\263\20\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\2\27\1\112\16\27"+
    "\32\0\7\27\1\112\3\27\1\0\4\27\1\0\1\27"+
    "\4\0\3\27\1\134\15\27\32\0\13\27\1\0\4\27"+
    "\1\0\1\27\4\0\11\27\1\264\7\27\32\0\3\27"+
    "\1\265\7\27\1\0\4\27\1\0\1\27\4\0\2\27"+
    "\1\266\16\27\32\0\3\27\1\267\5\27\1\270\1\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\7\27"+
    "\1\271\3\27\1\0\4\27\1\0\1\27\4\0\1\27"+
    "\1\272\17\27\32\0\7\27\1\273\3\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\4\27\1\274\6\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\4\27"+
    "\1\275\6\27\1\0\4\27\1\0\1\27\4\0\10\27"+
    "\1\112\10\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\2\27\1\276\16\27\32\0\1\27\1\277\11\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\2\27\1\300\16\27"+
    "\21\0\2\177\1\3\1\301\75\177\14\0\1\302\107\0"+
    "\1\303\56\0\1\304\1\305\1\304\1\306\1\307\3\0"+
    "\13\202\1\0\1\202\1\203\1\310\1\203\1\0\1\202"+
    "\4\0\17\202\1\203\1\202\32\0\13\202\1\0\1\202"+
    "\3\203\1\0\1\202\4\0\17\202\1\203\1\202\21\0"+
    "\1\204\1\311\1\206\1\207\1\204\1\311\21\204\1\311"+
    "\51\204\1\76\1\205\1\206\1\207\2\205\3\76\1\312"+
    "\5\313\1\314\4\313\1\76\1\313\1\76\1\205\2\76"+
    "\1\313\4\76\17\313\1\76\1\313\21\76\4\0\2\206"+
    "\1\0\1\74\1\0\1\315\5\316\1\317\4\316\1\0"+
    "\1\316\4\0\1\316\4\0\17\316\1\0\1\316\23\0"+
    "\1\206\1\0\2\206\1\0\1\74\1\0\1\315\5\316"+
    "\1\317\4\316\1\0\1\316\4\0\1\316\4\0\17\316"+
    "\1\0\1\316\21\0\10\210\1\320\70\210\7\321\1\322"+
    "\1\211\70\321\11\0\3\27\1\323\7\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\11\27\1\324\1\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\7\27\1\325\11\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\2\27"+
    "\1\236\16\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\1\27\1\326\17\27\32\0\6\27\1\327\4\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\5\27"+
    "\1\330\5\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\1\27\1\331\11\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\7\27\1\332\11\27\32\0\5\27\1\333\5\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\12\27"+
    "\1\334\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\5\27\1\335\5\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\1\27\1\336\11\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\10\27\1\337\2\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\1\27\1\157"+
    "\11\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\13\27\1\0\4\27\1\0\1\27\4\0\1\27\1\340"+
    "\17\27\32\0\1\112\12\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\1\27\1\341\11\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\10\27\1\342\2\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\5\27"+
    "\1\336\5\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\4\27\1\112\6\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\10\27\1\343\2\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\13\27\1\0\4\27"+
    "\1\0\1\27\4\0\1\27\1\153\17\27\32\0\4\27"+
    "\1\344\6\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\12\27\1\345\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\11\27\1\336\1\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\5\27\1\346\5\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\7\27\1\347"+
    "\3\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\1\27\1\350\11\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\4\27\1\351\6\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\5\27\1\352\5\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\51\0\1\254\25\0"+
    "\1\254\33\0\7\27\1\353\3\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\5\27\1\354\4\27\1\355"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\6\27"+
    "\1\356\4\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\5\27\1\357\5\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\2\27\1\360\16\27\32\0\4\27\1\361\6\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\5\27"+
    "\1\362\5\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\1\362"+
    "\20\27\32\0\11\27\1\112\1\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\7\27\1\363\3\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\1\364\20\27\32\0\2\27"+
    "\1\365\10\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\12\27\1\366\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\2\27\1\153\10\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\4\27\1\367\6\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\15\27\1\370\3\27\32\0"+
    "\5\27\1\371\5\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\13\27\1\372\5\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\27\1\373\17\27\23\0\1\3\1\0"+
    "\2\3\1\0\1\70\104\0\1\374\107\0\1\375\61\0"+
    "\1\304\76\0\1\304\1\305\1\304\1\306\1\307\21\0"+
    "\1\304\51\0\1\204\1\311\1\206\1\207\2\311\3\204"+
    "\1\376\5\377\1\u0100\4\377\1\204\1\377\1\204\1\311"+
    "\2\204\1\377\4\204\17\377\1\204\1\377\21\204\1\76"+
    "\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\3\76\1\313\1\u0105"+
    "\11\313\1\u0106\2\313\1\u0107\1\313\1\76\1\313\4\76"+
    "\21\313\22\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\3\76"+
    "\13\313\1\u0106\2\313\1\u0107\1\313\1\76\1\313\4\76"+
    "\21\313\22\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\3\76"+
    "\3\313\1\u0108\7\313\1\u0106\2\313\1\u0107\1\313\1\76"+
    "\1\313\4\76\21\313\21\76\1\0\5\u0109\3\0\1\316"+
    "\1\u010a\11\316\1\u010b\4\316\1\0\1\316\4\0\21\316"+
    "\22\0\5\u0109\3\0\13\316\1\u010b\4\316\1\0\1\316"+
    "\4\0\21\316\22\0\5\u0109\3\0\3\316\1\u010c\7\316"+
    "\1\u010b\4\316\1\0\1\316\4\0\21\316\21\0\7\210"+
    "\1\u010d\1\320\70\210\10\321\1\u010e\70\321\11\0\4\27"+
    "\1\u010f\6\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\1\u0110\12\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\1\27\1\u0111\11\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\5\27\1\u0112\5\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\5\27\1\u0113"+
    "\5\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\6\27\1\u0114\4\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\7\27\1\367\3\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\3\27\1\116\7\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\1\u0115\20\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\12\27\1\u0116\6\27"+
    "\32\0\11\27\1\u0117\1\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\5\27\1\u0118\5\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\13\27\1\0\4\27"+
    "\1\0\1\27\4\0\2\27\1\367\16\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\1\266\20\27\32\0"+
    "\4\27\1\240\6\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\2\27\1\u0119\10\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\7\27\1\u011a\3\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\1\27\1\u011b\17\27\32\0"+
    "\13\27\1\0\4\27\1\0\1\27\4\0\2\27\1\u011c"+
    "\16\27\32\0\3\27\1\u011d\7\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\2\27\1\u011e\16\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\17\27\1\112\1\27\32\0"+
    "\13\27\1\0\4\27\1\0\1\27\4\0\2\27\1\246"+
    "\16\27\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\3\27\1\331\15\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\u011f\20\27\32\0\10\27\1\266\2\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\10\27"+
    "\1\u0120\2\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\5\27\1\367\5\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\2\27\1\240\16\27\32\0\2\27\1\112\10\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\11\27"+
    "\1\u0121\1\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\5\27\1\341\5\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\6\27\1\361\12\27\32\0\13\27\1\0\4\27"+
    "\1\0\1\27\4\0\3\27\1\u0122\5\27\1\u0123\7\27"+
    "\32\0\7\27\1\u0124\3\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\5\27\1\u0125\5\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\12\27\1\u0126\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\33\0\1\u0127\107\0"+
    "\1\u0128\57\0\1\204\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129"+
    "\3\204\1\377\1\u012b\11\377\1\u012c\2\377\1\u012d\1\377"+
    "\1\204\1\377\4\204\21\377\22\204\1\u0129\1\u0102\1\u0103"+
    "\1\u012a\1\u0129\3\204\13\377\1\u012c\2\377\1\u012d\1\377"+
    "\1\204\1\377\4\204\21\377\22\204\1\u0129\1\u0102\1\u0103"+
    "\1\u012a\1\u0129\3\204\3\377\1\u012e\7\377\1\u012c\2\377"+
    "\1\u012d\1\377\1\204\1\377\4\204\21\377\21\204\1\76"+
    "\1\u0101\1\u0102\1\u0103\2\u0101\3\76\1\312\5\313\1\314"+
    "\4\313\1\u0106\1\313\1\76\1\u0101\2\76\1\313\4\76"+
    "\17\313\1\76\1\313\21\76\1\0\3\u0109\2\u0102\1\0"+
    "\1\74\1\0\1\315\5\316\1\317\4\316\1\u010b\1\316"+
    "\1\0\1\u0109\2\0\1\316\4\0\17\316\1\0\1\316"+
    "\22\0\1\u0109\1\u0102\1\u0109\2\u0102\1\0\1\74\1\0"+
    "\1\315\5\316\1\317\4\316\1\u010b\1\316\1\0\1\u0109"+
    "\2\0\1\316\4\0\17\316\1\0\1\316\21\0\1\76"+
    "\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\16\76\1\u0106\2\76"+
    "\1\u0101\52\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\3\76"+
    "\2\313\1\u012f\10\313\1\u0106\2\313\1\u0107\1\313\1\76"+
    "\1\313\4\76\21\313\22\76\1\u0101\1\u0102\1\u0103\2\u0101"+
    "\3\76\1\312\5\313\1\314\4\313\1\u0106\2\313\1\u0107"+
    "\1\313\1\76\1\313\4\76\21\313\22\76\1\u0101\1\u0102"+
    "\1\u0103\1\u0104\1\u0101\3\76\7\313\1\u0130\3\313\1\u0106"+
    "\2\313\1\u0107\1\313\1\76\1\313\4\76\21\313\21\76"+
    "\1\0\5\u0109\16\0\1\u010b\2\0\1\u0109\52\0\5\u0109"+
    "\3\0\2\316\1\u0131\10\316\1\u010b\4\316\1\0\1\316"+
    "\4\0\21\316\22\0\5\u0109\3\0\7\316\1\u0132\3\316"+
    "\1\u010b\4\316\1\0\1\316\4\0\21\316\21\0\7\321"+
    "\1\322\1\u010e\70\321\11\0\5\27\1\u0133\5\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\1\u0134\20\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\10\27\1\u0135\10\27"+
    "\32\0\11\27\1\367\1\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\2\27\1\u0136\16\27\32\0\13\27\1\0\4\27"+
    "\1\0\1\27\4\0\2\27\1\u0137\16\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\1\27\1\240\17\27"+
    "\32\0\12\27\1\u0138\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\2\27\1\u0139\16\27\32\0\2\27\1\u013a\10\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\4\27\1\u013b"+
    "\6\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\11\27\1\u013c\1\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\2\27\1\u013d\10\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\1\27\1\u013e\17\27\32\0\10\27\1\240"+
    "\2\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\13\27\1\0\4\27\1\0\1\27\4\0\11\27\1\112"+
    "\7\27\32\0\5\27\1\u013f\5\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\1\27\1\u0140\11\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\5\27\1\u0141"+
    "\5\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\11\27\1\u0142\1\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\10\27\1\u0143\2\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\1\27\1\u0144\11\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\1\306\107\0"+
    "\1\u0145\60\0\1\204\1\u0129\1\u0102\1\u0103\2\u0129\3\204"+
    "\1\376\5\377\1\u0100\4\377\1\u012c\1\377\1\204\1\u0129"+
    "\2\204\1\377\4\204\17\377\1\204\1\377\22\204\1\u0129"+
    "\1\u0102\1\u0103\1\u012a\1\u0129\16\204\1\u012c\2\204\1\u0129"+
    "\52\204\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129\3\204\2\377"+
    "\1\u0146\10\377\1\u012c\2\377\1\u012d\1\377\1\204\1\377"+
    "\4\204\21\377\22\204\1\u0129\1\u0102\1\u0103\2\u0129\3\204"+
    "\1\376\5\377\1\u0100\4\377\1\u012c\2\377\1\u012d\1\377"+
    "\1\204\1\377\4\204\21\377\22\204\1\u0129\1\u0102\1\u0103"+
    "\1\u012a\1\u0129\3\204\7\377\1\u0147\3\377\1\u012c\2\377"+
    "\1\u012d\1\377\1\204\1\377\4\204\21\377\21\204\1\76"+
    "\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\3\76\3\313\1\u0148"+
    "\7\313\1\u0106\2\313\1\u0107\1\313\1\76\1\313\4\76"+
    "\21\313\22\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101\3\76"+
    "\10\313\1\u0149\2\313\1\u0106\2\313\1\u0107\1\313\1\76"+
    "\1\313\4\76\21\313\21\76\1\0\5\u0109\3\0\3\316"+
    "\1\u014a\7\316\1\u010b\4\316\1\0\1\316\4\0\21\316"+
    "\22\0\5\u0109\3\0\10\316\1\u014b\2\316\1\u010b\4\316"+
    "\1\0\1\316\4\0\21\316\32\0\11\27\1\u014c\1\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\13\27"+
    "\1\0\4\27\1\0\1\27\4\0\1\27\1\u014d\17\27"+
    "\32\0\5\27\1\u014e\5\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\4\27\1\u014f\14\27\32\0\1\27\1\u0150\11\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\5\27"+
    "\1\u0140\5\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\5\27\1\u0151\5\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\1\u0152\20\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\4\27\1\u0153\14\27\32\0\5\27\1\u0154"+
    "\5\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\5\27\1\u0155\5\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\7\27\1\336\3\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\2\27\1\u0156\10\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\13\27\1\0"+
    "\4\27\1\0\1\27\4\0\4\27\1\u0157\14\27\32\0"+
    "\11\27\1\u0158\1\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\7\27\1\u0159\3\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\35\0\1\u015a\64\0\1\204\1\u0129"+
    "\1\u0102\1\u0103\1\u012a\1\u0129\3\204\3\377\1\u015b\7\377"+
    "\1\u012c\2\377\1\u012d\1\377\1\204\1\377\4\204\21\377"+
    "\22\204\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129\3\204\10\377"+
    "\1\u015c\2\377\1\u012c\2\377\1\u012d\1\377\1\204\1\377"+
    "\4\204\21\377\21\204\1\76\1\u0101\1\u0102\1\u0103\1\u0104"+
    "\1\u0101\3\76\4\313\1\u015d\6\313\1\u0106\2\313\1\u0107"+
    "\1\313\1\76\1\313\4\76\21\313\22\76\1\u0101\1\u0102"+
    "\1\u0103\1\u0104\1\u0101\3\76\11\313\1\u015e\1\313\1\u0106"+
    "\2\313\1\u0107\1\313\1\76\1\313\4\76\21\313\21\76"+
    "\1\0\5\u0109\3\0\4\316\1\u015f\6\316\1\u010b\4\316"+
    "\1\0\1\316\4\0\21\316\22\0\5\u0109\3\0\11\316"+
    "\1\u0160\1\316\1\u010b\4\316\1\0\1\316\4\0\21\316"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\2\27"+
    "\1\u0161\16\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\7\27\1\u0162\11\27\32\0\7\27\1\u0163\3\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\5\27"+
    "\1\u0164\5\27\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\7\27\1\u0165\3\27\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\13\27\1\0\4\27\1\0\1\27"+
    "\4\0\2\27\1\336\16\27\32\0\11\27\1\361\1\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\2\27"+
    "\1\u0166\10\27\1\0\4\27\1\0\1\27\4\0\1\27"+
    "\1\u0167\17\27\32\0\10\27\1\u0168\2\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\13\27\1\0\4\27"+
    "\1\0\1\27\4\0\2\27\1\u0122\16\27\32\0\1\u0169"+
    "\12\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\12\27\1\221\1\0\4\27\1\0\1\27\4\0\21\27"+
    "\32\0\13\27\1\0\4\27\1\0\1\27\4\0\4\27"+
    "\1\u016a\14\27\40\0\1\306\61\0\1\204\1\u0129\1\u0102"+
    "\1\u0103\1\u012a\1\u0129\3\204\4\377\1\u016b\6\377\1\u012c"+
    "\2\377\1\u012d\1\377\1\204\1\377\4\204\21\377\22\204"+
    "\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129\3\204\11\377\1\u016c"+
    "\1\377\1\u012c\2\377\1\u012d\1\377\1\204\1\377\4\204"+
    "\21\377\21\204\1\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101"+
    "\3\76\5\313\1\u016d\5\313\1\u0106\2\313\1\u0107\1\313"+
    "\1\76\1\313\4\76\21\313\22\76\1\u0101\1\u0102\1\u0103"+
    "\1\u0104\1\u0101\3\76\12\313\1\u016e\1\u0106\2\313\1\u0107"+
    "\1\313\1\76\1\313\4\76\21\313\21\76\1\0\5\u0109"+
    "\3\0\5\316\1\u016f\5\316\1\u010b\4\316\1\0\1\316"+
    "\4\0\21\316\22\0\5\u0109\3\0\12\316\1\u0170\1\u010b"+
    "\4\316\1\0\1\316\4\0\21\316\32\0\12\27\1\u0171"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\32\0\12\27"+
    "\1\367\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\10\27\1\361\2\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\5\27\1\u0172\13\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\5\27\1\u0173\13\27\32\0\11\27\1\u0174"+
    "\1\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\11\27\1\u0175\1\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\1\27\1\u0176\11\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\7\27\1\u0177\3\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\21\0\1\204\1\u0129"+
    "\1\u0102\1\u0103\1\u012a\1\u0129\3\204\5\377\1\u0178\5\377"+
    "\1\u012c\2\377\1\u012d\1\377\1\204\1\377\4\204\21\377"+
    "\22\204\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129\3\204\12\377"+
    "\1\u0179\1\u012c\2\377\1\u012d\1\377\1\204\1\377\4\204"+
    "\21\377\21\204\1\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101"+
    "\3\76\1\313\1\u017a\11\313\1\u0106\2\313\1\u0107\1\313"+
    "\1\76\1\313\4\76\21\313\21\76\1\0\5\u0109\3\0"+
    "\1\316\1\u017b\11\316\1\u010b\4\316\1\0\1\316\4\0"+
    "\21\316\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\5\27\1\367\13\27\32\0\11\27\1\u017c\1\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\6\27\1\336"+
    "\4\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\4\27\1\336\6\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\12\27\1\u017d\1\0\4\27\1\0\1\27"+
    "\4\0\21\27\32\0\2\27\1\u017e\10\27\1\0\4\27"+
    "\1\0\1\27\4\0\21\27\32\0\3\27\1\235\7\27"+
    "\1\0\4\27\1\0\1\27\4\0\21\27\21\0\1\204"+
    "\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129\3\204\1\377\1\u017f"+
    "\11\377\1\u012c\2\377\1\u012d\1\377\1\204\1\377\4\204"+
    "\21\377\21\204\1\76\1\u0101\1\u0102\1\u0103\1\u0104\1\u0101"+
    "\3\76\7\313\1\u016d\3\313\1\u0106\2\313\1\u0107\1\313"+
    "\1\76\1\313\4\76\21\313\21\76\1\0\5\u0109\3\0"+
    "\7\316\1\u016f\3\316\1\u010b\4\316\1\0\1\316\4\0"+
    "\21\316\32\0\13\27\1\0\4\27\1\0\1\27\4\0"+
    "\2\27\1\u0180\16\27\32\0\1\27\1\u0181\11\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\3\27\1\u0182"+
    "\7\27\1\0\4\27\1\0\1\27\4\0\21\27\21\0"+
    "\1\204\1\u0129\1\u0102\1\u0103\1\u012a\1\u0129\3\204\7\377"+
    "\1\u0178\3\377\1\u012c\2\377\1\u012d\1\377\1\204\1\377"+
    "\4\204\21\377\21\204\11\0\3\27\1\u0183\7\27\1\0"+
    "\4\27\1\0\1\27\4\0\21\27\32\0\7\27\1\u0184"+
    "\3\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\4\27\1\u0185\6\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\32\0\2\27\1\361\10\27\1\0\4\27\1\0"+
    "\1\27\4\0\21\27\32\0\13\27\1\0\4\27\1\0"+
    "\1\27\4\0\4\27\1\u0186\14\27\32\0\5\27\1\112"+
    "\5\27\1\0\4\27\1\0\1\27\4\0\21\27\32\0"+
    "\6\27\1\236\4\27\1\0\4\27\1\0\1\27\4\0"+
    "\21\27\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\17\1\1\11\10\1\15\11"+
    "\6\1\2\11\5\0\1\11\43\1\1\11\1\0\1\1"+
    "\1\0\1\11\1\0\1\11\23\1\4\11\1\1\5\0"+
    "\1\1\2\0\45\1\1\0\23\1\3\0\1\11\1\1"+
    "\1\0\2\1\1\0\3\1\4\0\1\1\1\11\51\1"+
    "\5\0\1\1\2\0\5\1\2\0\1\11\1\0\1\11"+
    "\1\0\30\1\5\0\1\1\2\0\2\1\2\0\22\1"+
    "\3\0\2\1\2\0\16\1\3\0\2\1\2\0\12\1"+
    "\2\0\3\1\1\0\10\1\1\0\1\1\1\0\3\1"+
    "\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 55: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 3: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 57: break;
          case 4: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 58: break;
          case 5: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 59: break;
          case 6: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 60: break;
          case 7: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 61: break;
          case 8: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 62: break;
          case 9: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 63: break;
          case 10: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 64: break;
          case 11: 
            { return OpenSCADTypes.SQ_STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 12: 
            { return OpenSCADTypes.DQ_STRING_LITERAL;
            } 
            // fall through
          case 66: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 67: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 68: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 69: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 70: break;
          case 17: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 71: break;
          case 18: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 72: break;
          case 19: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 73: break;
          case 20: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 74: break;
          case 21: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 75: break;
          case 22: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 76: break;
          case 23: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 77: break;
          case 24: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 78: break;
          case 25: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 79: break;
          case 26: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 80: break;
          case 27: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 81: break;
          case 28: 
            { return OpenSCADTypes.INCLUDE_PATH;
            } 
            // fall through
          case 82: break;
          case 29: 
            { yybegin(YYINITIAL); return OpenSCADTypes.INCLUDE_END;
            } 
            // fall through
          case 83: break;
          case 30: 
            { return OpenSCADTypes.INCLUDE_START;
            } 
            // fall through
          case 84: break;
          case 31: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 85: break;
          case 32: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 86: break;
          case 33: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 87: break;
          case 34: 
            { return OpenSCADTypes.BUILTIN_EXPR;
            } 
            // fall through
          case 88: break;
          case 35: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 36: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 90: break;
          case 37: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 91: break;
          case 38: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 92: break;
          case 39: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 93: break;
          case 40: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 94: break;
          case 41: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 95: break;
          case 42: 
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.USE_ITEM;
            } 
            // fall through
          case 96: break;
          case 43: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 44: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 45: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 46: 
            { return OpenSCADTypes.BUILTIN_OBJ;
            } 
            // fall through
          case 100: break;
          case 47: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 48: 
            { return OpenSCADTypes.BUILTIN_OP;
            } 
            // fall through
          case 102: break;
          case 49: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 2;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 3;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 103: break;
          case 50: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 51: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 52: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 53: 
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.INCLUDE_ITEM;
            } 
            // fall through
          case 107: break;
          case 54: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
