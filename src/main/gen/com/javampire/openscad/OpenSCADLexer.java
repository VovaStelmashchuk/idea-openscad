/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.javampire.openscad.psi.OpenSCADTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad.flex</tt>
 */
class OpenSCADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDE_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\17\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\23"+
    "\10\1\26\1\40\3\10\1\23\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\26\3\10\2"+
    "\46\1\26\1\47\1\50\1\0\1\51\5\10\1\52\3\0\1\53\1\54\13\10\1\55\1\44\1\56\1"+
    "\57\1\0\1\60\1\26\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\26\1\0\1\66"+
    "\3\10\1\52\1\67\1\22\2\10\1\64\1\70\1\71\1\72\2\26\3\10\1\73\10\26\1\74\1"+
    "\27\6\26\1\75\2\0\1\76\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\2\40\1\103"+
    "\1\104\1\105\2\10\1\74\1\106\1\107\1\110\1\111\1\61\1\112\1\102\1\0\1\113"+
    "\1\50\1\103\1\114\1\105\2\10\1\74\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\1\124\1\26\1\103\1\35\1\34\2\10\1\74\1\125\1\107\1\44\1\126\1\127\1\26"+
    "\1\102\1\0\1\41\1\26\1\103\1\104\1\105\2\10\1\74\1\125\1\107\1\110\1\120\1"+
    "\123\1\112\1\102\1\0\1\41\1\26\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1"+
    "\135\1\136\1\137\1\140\1\26\1\123\1\0\1\26\1\41\1\103\1\31\1\74\2\10\1\74"+
    "\1\141\1\142\1\143\1\137\1\144\1\25\1\102\1\0\2\26\1\145\1\31\1\74\2\10\1"+
    "\74\1\141\1\107\1\143\1\137\1\144\1\32\1\102\1\0\1\146\1\26\1\145\1\31\1\74"+
    "\4\10\1\147\1\143\1\150\1\61\1\26\1\102\1\0\1\26\1\37\1\145\1\10\1\23\1\37"+
    "\2\10\1\34\1\151\1\23\1\152\1\153\1\0\2\26\1\154\1\26\1\40\5\10\1\155\1\156"+
    "\1\157\1\76\1\0\1\160\4\26\1\161\1\162\1\163\1\40\1\164\1\165\1\155\1\166"+
    "\1\167\1\170\1\0\1\171\4\26\1\127\2\26\1\160\1\0\1\160\1\172\1\173\1\10\1"+
    "\40\3\10\1\27\1\43\1\0\1\143\1\174\1\0\1\43\3\0\1\47\1\175\7\26\5\10\1\52"+
    "\1\0\1\176\1\0\1\160\1\64\1\177\1\200\1\201\1\202\1\10\1\203\1\204\1\0\1\170"+
    "\4\10\1\35\1\21\5\10\1\205\51\10\1\132\1\23\1\132\5\10\1\132\4\10\1\132\1"+
    "\23\1\132\1\10\1\23\7\10\1\132\10\10\1\206\4\26\2\10\2\26\12\10\1\27\1\26"+
    "\1\40\114\10\1\104\2\10\1\40\2\10\1\46\11\10\1\131\1\127\1\26\1\10\1\31\1"+
    "\207\1\26\2\10\1\207\1\26\2\10\1\210\1\26\1\10\1\31\1\211\1\26\6\10\1\212"+
    "\3\0\1\213\1\214\1\0\1\160\3\26\1\215\1\0\1\160\13\10\1\26\5\10\1\216\10\10"+
    "\1\217\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\123\1\0\3\10\1\217\1\27\1\26\5\10"+
    "\1\113\2\0\1\54\1\160\1\0\1\160\4\26\2\10\1\157\1\2\6\10\1\174\1\76\3\0\1"+
    "\110\1\0\1\160\1\0\1\160\1\42\13\26\1\220\5\10\1\212\1\0\1\220\1\113\1\0\1"+
    "\160\1\26\1\221\1\2\1\26\1\222\3\10\1\101\1\201\1\0\1\66\4\10\1\64\1\0\1\2"+
    "\1\26\4\10\1\212\2\0\1\26\1\0\1\223\1\0\1\66\3\10\1\217\12\26\1\224\2\0\1"+
    "\225\1\226\1\26\30\10\4\0\1\76\2\26\1\75\42\10\2\217\4\10\2\217\1\10\1\227"+
    "\3\10\1\217\6\10\1\31\1\167\1\230\1\27\1\231\1\113\1\10\1\27\1\230\1\27\1"+
    "\26\1\221\3\26\1\232\1\26\1\42\1\127\1\26\1\233\1\26\1\47\1\234\1\41\1\42"+
    "\2\26\1\10\1\27\3\10\1\46\2\26\1\0\1\47\1\235\1\0\1\236\1\26\1\237\1\37\1"+
    "\151\1\240\1\30\1\241\1\10\1\242\1\243\1\244\2\26\5\10\1\127\116\26\5\10\1"+
    "\23\5\10\1\23\20\10\1\27\1\245\1\246\1\26\4\10\1\35\1\21\7\10\1\42\1\26\1"+
    "\61\2\10\1\23\1\26\10\23\4\0\5\26\1\42\72\26\1\243\3\26\1\40\1\203\1\240\1"+
    "\27\1\40\11\10\1\23\1\247\1\40\12\10\1\205\1\243\4\10\1\217\1\40\12\10\1\23"+
    "\2\26\3\10\1\46\6\26\170\10\1\217\11\26\71\10\1\27\6\26\21\10\1\27\10\26\5"+
    "\10\1\217\41\10\1\27\2\10\1\0\1\246\2\26\5\10\1\157\1\75\1\250\3\10\1\61\12"+
    "\10\1\160\3\26\1\42\1\10\1\37\14\10\1\251\1\113\1\26\1\10\1\46\11\26\1\10"+
    "\1\252\1\253\2\10\1\52\2\26\1\127\6\10\1\113\1\26\1\66\5\10\1\212\1\0\1\47"+
    "\1\26\1\0\1\160\2\0\1\66\1\50\1\0\1\66\2\10\1\64\1\170\2\10\1\157\1\0\1\2"+
    "\1\26\3\10\1\27\1\77\5\10\1\52\1\0\1\236\1\42\1\0\1\160\4\26\5\10\1\101\1"+
    "\76\1\26\1\253\1\254\1\0\1\160\2\10\1\23\1\255\6\10\1\200\1\256\1\216\2\26"+
    "\1\257\1\10\1\52\1\260\1\26\3\261\1\26\2\23\22\26\4\10\1\52\1\262\1\0\1\160"+
    "\64\10\1\113\1\26\2\10\1\23\1\263\5\10\1\113\40\26\55\10\1\217\15\10\1\25"+
    "\4\26\1\23\1\26\1\263\1\264\1\10\1\74\1\23\1\167\1\265\15\10\1\25\3\26\1\263"+
    "\54\10\1\217\2\26\10\10\1\37\6\10\5\26\1\10\1\27\2\0\2\26\1\76\1\26\1\134"+
    "\2\26\1\243\3\26\1\41\1\31\20\10\1\266\1\233\1\26\1\0\1\160\1\40\2\10\1\114"+
    "\1\40\2\10\1\46\1\267\12\10\1\23\3\37\1\270\1\271\2\26\1\272\1\10\1\141\2"+
    "\10\1\23\2\10\1\273\1\10\1\217\1\10\1\217\4\26\17\10\1\46\10\26\6\10\1\27"+
    "\20\26\1\274\20\26\3\10\1\27\6\10\1\127\5\26\3\10\1\23\2\26\3\10\1\46\6\26"+
    "\3\10\1\217\4\10\1\113\1\10\1\240\5\26\23\10\1\217\1\0\1\160\52\26\1\217\1"+
    "\74\4\10\1\35\1\275\2\10\1\217\25\26\2\10\1\217\1\26\3\10\1\25\10\26\7\10"+
    "\1\267\10\26\1\276\1\75\1\141\1\40\2\10\1\113\1\117\4\26\3\10\1\27\20\26\6"+
    "\10\1\217\1\26\2\10\1\217\1\26\2\10\1\46\21\26\11\10\1\127\66\26\1\222\6\10"+
    "\1\0\1\76\3\26\1\123\1\0\2\26\1\222\5\10\1\0\1\277\2\26\3\10\1\127\1\0\1\160"+
    "\1\222\3\10\1\157\1\0\1\143\1\0\10\26\1\222\5\10\1\52\1\0\1\300\1\26\1\0\1"+
    "\160\24\26\5\10\1\52\1\0\1\26\1\0\1\160\46\26\55\10\1\23\22\26\14\10\1\46"+
    "\63\26\5\10\1\23\72\26\7\10\1\127\130\26\10\10\1\27\1\26\1\101\4\0\1\76\1"+
    "\26\1\61\1\222\1\10\14\26\1\25\153\26\1\301\1\302\2\0\1\303\1\2\3\26\1\304"+
    "\22\26\1\305\67\26\12\10\1\31\10\10\1\31\1\306\1\307\1\10\1\310\1\141\7\10"+
    "\1\35\1\311\2\31\3\10\1\312\1\167\1\37\1\74\51\10\1\217\3\10\1\74\2\10\1\205"+
    "\3\10\1\205\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\74\3\10\1\74\2"+
    "\10\1\205\1\313\6\0\1\141\3\10\1\161\1\40\1\205\1\314\1\237\1\315\1\161\1"+
    "\227\1\161\2\205\1\122\1\10\1\34\1\10\1\113\1\316\1\34\1\10\1\113\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\217\74\26\1\121\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\1\1\2\2\1\1\2\6\7\4\0\1\1\1\73\1\17\1\71\1\6\1\60\1\74\1\16\1\63\1"+
    "\64\1\5\1\14\1\56\1\57\1\12\1\4\2\11\1\52\7\11\1\62\1\55\1\72\1\54\1\3\1\61"+
    "\1\0\4\6\1\13\15\6\1\67\1\15\1\70\1\0\1\37\1\0\1\31\1\41\1\22\1\25\1\26\1"+
    "\30\1\34\1\35\1\20\1\44\1\50\1\23\1\40\1\21\1\36\1\43\1\45\1\33\1\27\1\32"+
    "\1\24\1\53\1\51\1\46\1\42\1\47\1\65\1\75\1\66\1\0\6\7\1\10\2\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\7\6\1\0\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0"+
    "\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7"+
    "\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7"+
    "\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0"+
    "\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1"+
    "\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0"+
    "\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1"+
    "\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0\2\7\1\0\3\6\1\0\2\6\5\0\3\6"+
    "\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4"+
    "\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6"+
    "\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1"+
    "\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1"+
    "\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3"+
    "\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\7\3"+
    "\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0"+
    "\3\6\1\0\6\6\2\0\2\6\2\1\5\7\5\0\1\6\5\0\6\7\1\0\1\7\3\0\4\7\11\0\1\6\4\0"+
    "\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2"+
    "\6\5\0\2\7\2\0\3\6\6\7\1\0\2\6\2\0\4\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\10\6\2"+
    "\7\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7"+
    "\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3"+
    "\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7"+
    "\1\0\2\7\1\0\3\7\2\0\1\7\2\0\1\7\4\6\10\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0"+
    "\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4"+
    "\6\2\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\21\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\1\1\34\1\2"+
    "\1\35\1\36\1\37\1\40\1\41\1\7\2\0\1\12"+
    "\1\0\1\13\1\6\1\42\12\6\1\43\47\6\1\44"+
    "\1\45\1\46\1\47\1\50\1\41\1\51\1\7\1\0"+
    "\11\6\1\52\2\6\1\53\2\6\1\54\1\55\1\56"+
    "\3\6\1\57\4\6\1\60\1\61\5\6\1\62\6\6"+
    "\1\63\4\6\1\64\1\6\1\65\11\6\1\66\2\6"+
    "\1\67\4\6\1\70\1\6\1\0\2\51\3\6\1\71"+
    "\1\6\1\72\1\73\12\6\1\74\1\6\1\75\1\76"+
    "\6\6\1\77\3\6\1\100\1\101\2\6\1\102\1\103"+
    "\1\104\6\6\1\105\11\6\1\41\1\0\4\6\1\106"+
    "\1\107\1\6\1\110\3\6\1\111\1\112\2\6\1\113"+
    "\5\6\1\114\1\6\1\115\2\6\1\116\3\6\1\117"+
    "\1\120\15\6\1\121\1\122\1\6\1\123\2\6\1\124"+
    "\3\6\1\125\1\126\1\127\1\130\1\6\1\131\1\132"+
    "\1\6\1\133\1\134\1\135\1\136\1\6\1\137\1\6"+
    "\1\140\5\6\1\141\6\6\1\142\1\143\7\6\1\144"+
    "\1\6\1\145\3\6\1\146\1\147\2\6\1\150\15\6"+
    "\1\151\1\6\1\152\6\6\1\153\1\154\1\6\1\155"+
    "\1\6\1\156\1\6\1\157\1\160\5\6\1\161\1\162"+
    "\6\6\1\163\1\6\1\164\1\165\1\6\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\174\0\u0174"+
    "\0\u01b2\0\u01f0\0\174\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\174\0\174\0\174\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\174\0\u09b0\0\174\0\u09ee\0\u0174\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0174\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\174\0\174\0\174\0\174\0\174\0\u160a\0\u1648"+
    "\0\u1686\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u0174\0\u18f2\0\u1930\0\u0174\0\u196e"+
    "\0\u19ac\0\u0174\0\u0174\0\u0174\0\u19ea\0\u1a28\0\u1a66\0\u0174"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u0174\0\u0174\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u0174\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u0174\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u0174"+
    "\0\u1f3e\0\u0174\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2"+
    "\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u0174\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u0174\0\u235c\0\u239a\0\u23d8\0\174"+
    "\0\u2416\0\u2454\0\u2492\0\u0174\0\u24d0\0\u0174\0\u0174\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\u273c\0\u0174\0\u277a\0\u0174\0\u0174\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u0174\0\u292c\0\u296a\0\u29a8\0\u0174"+
    "\0\u0174\0\u29e6\0\u2a24\0\u2a62\0\u0174\0\u0174\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u0174\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\174\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u0174\0\u2f78\0\u2fb6\0\u0174"+
    "\0\u2ff4\0\u3032\0\u3070\0\u0174\0\u0174\0\u30ae\0\u30ec\0\u0174"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u0174\0\u3260\0\u0174"+
    "\0\u329e\0\u32dc\0\u0174\0\u331a\0\u3358\0\u3396\0\u0174\0\u0174"+
    "\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586"+
    "\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u0174\0\u3738"+
    "\0\u0174\0\u3776\0\u37b4\0\u0174\0\u37f2\0\u3830\0\u386e\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u38ac\0\u0174\0\u0174\0\u38ea\0\u0174"+
    "\0\u0174\0\u3928\0\u0174\0\u3966\0\u0174\0\u39a4\0\u0174\0\u39e2"+
    "\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u0174\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u0174\0\u0174\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u0174\0\u3e3e\0\u3e7c\0\u3eba"+
    "\0\u3ef8\0\u3f36\0\u0174\0\u0174\0\u3f74\0\u3fb2\0\u0174\0\u3ff0"+
    "\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0"+
    "\0\u421e\0\u425c\0\u429a\0\u42d8\0\u0174\0\u4316\0\u0174\0\u4354"+
    "\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u0174\0\u0174\0\u44c8"+
    "\0\u0174\0\u4506\0\u0174\0\u4544\0\u0174\0\u0174\0\u4582\0\u45c0"+
    "\0\u45fe\0\u463c\0\u467a\0\u0174\0\u46b8\0\u46f6\0\u4734\0\u4772"+
    "\0\u47b0\0\u47ee\0\u482c\0\u0174\0\u486a\0\u0174\0\u0174\0\u48a8"+
    "\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\3\1\4"+
    "\1\11\1\12\1\10\1\13\1\3\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\10\1\32\1\33\1\10\1\34"+
    "\2\10\1\35\6\10\1\11\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\62\1\63\4\61\1\62\61\61\1\64\3\61\77\0"+
    "\2\4\5\0\1\4\141\0\1\65\25\0\1\66\1\67"+
    "\76\0\4\10\1\0\1\10\4\0\34\10\33\0\1\11"+
    "\1\70\1\71\12\0\1\71\23\0\1\11\34\0\1\70"+
    "\40\0\1\70\23\0\15\14\1\72\1\73\57\14\15\15"+
    "\1\74\1\15\1\75\56\15\6\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\76\6\10\1\77\7\10\1\100\13\10"+
    "\30\0\4\10\1\0\1\10\4\0\16\10\1\101\15\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\102\3\10\1\103"+
    "\1\10\1\104\4\10\1\105\1\10\1\106\1\107\3\10"+
    "\1\110\11\10\30\0\4\10\1\0\1\10\4\0\1\111"+
    "\1\112\4\10\1\113\7\10\1\114\15\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\115\5\10\1\116\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\117\33\10\30\0"+
    "\4\10\1\0\1\10\4\0\2\10\1\120\1\121\22\10"+
    "\1\122\5\10\30\0\4\10\1\0\1\10\4\0\1\123"+
    "\1\10\1\124\1\10\1\125\1\10\1\126\3\10\1\127"+
    "\10\10\1\130\1\10\1\131\6\10\30\0\4\10\1\0"+
    "\1\10\4\0\3\10\1\132\1\133\4\10\1\134\4\10"+
    "\1\135\15\10\30\0\4\10\1\0\1\10\4\0\2\10"+
    "\1\136\4\10\1\137\2\10\1\140\6\10\1\141\12\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\142\2\10"+
    "\1\143\1\10\1\144\20\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\145\2\10\1\146\4\10\1\147\15\10"+
    "\30\0\4\10\1\0\1\10\4\0\4\10\1\150\27\10"+
    "\30\0\4\10\1\0\1\10\4\0\10\10\1\151\23\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\152\3\10\1\153"+
    "\4\10\1\154\4\10\1\155\15\10\30\0\4\10\1\0"+
    "\1\10\4\0\11\10\1\156\1\10\1\157\2\10\1\160"+
    "\15\10\30\0\4\10\1\0\1\10\4\0\6\10\1\161"+
    "\25\10\76\0\1\162\75\0\1\163\75\0\1\164\115\0"+
    "\1\165\76\0\1\166\3\61\1\0\66\61\1\0\4\61"+
    "\2\62\1\0\4\61\1\62\61\61\1\0\3\61\2\66"+
    "\1\0\73\66\5\167\1\170\70\167\11\0\1\70\1\0"+
    "\1\71\12\0\1\71\23\0\1\70\34\0\1\171\2\0"+
    "\1\172\35\0\1\171\4\0\1\172\16\0\76\14\76\15"+
    "\6\0\4\10\1\0\1\10\4\0\2\10\1\173\7\10"+
    "\1\174\21\10\30\0\4\10\1\0\1\10\4\0\23\10"+
    "\1\175\10\10\30\0\4\10\1\0\1\10\4\0\13\10"+
    "\1\176\20\10\30\0\4\10\1\0\1\10\4\0\13\10"+
    "\1\177\20\10\30\0\4\10\1\0\1\10\4\0\21\10"+
    "\1\200\12\10\30\0\4\10\1\0\1\10\4\0\1\201"+
    "\33\10\30\0\4\10\1\0\1\10\4\0\16\10\1\202"+
    "\15\10\30\0\4\10\1\0\1\10\4\0\1\203\12\10"+
    "\1\204\20\10\30\0\4\10\1\0\1\10\4\0\1\10"+
    "\1\205\1\10\1\206\3\10\1\207\24\10\30\0\4\10"+
    "\1\0\1\10\4\0\3\10\1\210\30\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\211\32\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\212\10\10\1\213\21\10"+
    "\30\0\4\10\1\0\1\10\4\0\14\10\1\214\1\10"+
    "\1\215\15\10\30\0\4\10\1\0\1\10\4\0\1\216"+
    "\4\10\1\217\26\10\30\0\4\10\1\0\1\10\4\0"+
    "\6\10\1\220\25\10\30\0\4\10\1\0\1\10\4\0"+
    "\10\10\1\221\23\10\30\0\4\10\1\0\1\10\4\0"+
    "\15\10\1\222\16\10\30\0\4\10\1\0\1\10\4\0"+
    "\3\10\1\223\3\10\1\224\24\10\30\0\4\10\1\0"+
    "\1\10\4\0\23\10\1\225\10\10\30\0\4\10\1\0"+
    "\1\10\4\0\1\10\1\226\12\10\1\227\17\10\30\0"+
    "\4\10\1\0\1\10\4\0\11\10\1\230\22\10\30\0"+
    "\4\10\1\0\1\10\4\0\13\10\1\231\20\10\30\0"+
    "\4\10\1\0\1\10\4\0\3\10\1\232\5\10\1\233"+
    "\22\10\30\0\4\10\1\0\1\10\4\0\13\10\1\234"+
    "\20\10\30\0\4\10\1\0\1\10\4\0\15\10\1\235"+
    "\16\10\30\0\4\10\1\0\1\10\4\0\4\10\1\236"+
    "\6\10\1\237\20\10\30\0\4\10\1\0\1\10\4\0"+
    "\16\10\1\240\15\10\30\0\4\10\1\0\1\10\4\0"+
    "\1\10\1\241\32\10\30\0\4\10\1\0\1\10\4\0"+
    "\3\10\1\242\30\10\30\0\4\10\1\0\1\10\4\0"+
    "\13\10\1\243\20\10\30\0\4\10\1\0\1\10\4\0"+
    "\16\10\1\244\15\10\30\0\4\10\1\0\1\10\4\0"+
    "\1\245\6\10\1\246\24\10\30\0\4\10\1\0\1\10"+
    "\4\0\11\10\1\247\22\10\30\0\4\10\1\0\1\10"+
    "\4\0\7\10\1\250\24\10\30\0\4\10\1\0\1\10"+
    "\4\0\26\10\1\251\5\10\30\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\252\32\10\30\0\4\10\1\0\1\10"+
    "\4\0\4\10\1\253\4\10\1\254\22\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\255\5\10\1\256\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\257\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\4\10\1\260\5\10"+
    "\1\261\21\10\30\0\4\10\1\0\1\10\4\0\3\10"+
    "\1\262\30\10\30\0\4\10\1\0\1\10\4\0\10\10"+
    "\1\263\23\10\30\0\4\10\1\0\1\10\4\0\1\10"+
    "\1\264\11\10\1\265\20\10\30\0\4\10\1\0\1\10"+
    "\4\0\3\10\1\266\30\10\30\0\4\10\1\0\1\10"+
    "\4\0\26\10\1\267\5\10\30\0\4\10\1\0\1\10"+
    "\4\0\5\10\1\270\26\10\30\0\4\10\1\0\1\10"+
    "\4\0\13\10\1\271\20\10\30\0\4\10\1\0\1\10"+
    "\4\0\16\10\1\272\15\10\30\0\4\10\1\0\1\10"+
    "\4\0\3\10\1\273\25\10\1\274\2\10\30\0\4\10"+
    "\1\0\1\10\4\0\13\10\1\275\20\10\22\0\5\167"+
    "\1\276\70\167\4\277\1\300\1\170\70\277\11\0\1\171"+
    "\40\0\1\171\31\0\4\10\1\0\1\10\4\0\3\10"+
    "\1\301\30\10\30\0\4\10\1\0\1\10\4\0\6\10"+
    "\1\302\25\10\30\0\4\10\1\0\1\10\4\0\16\10"+
    "\1\303\15\10\30\0\4\10\1\0\1\10\4\0\20\10"+
    "\1\304\13\10\30\0\4\10\1\0\1\10\4\0\2\10"+
    "\1\305\31\10\30\0\4\10\1\0\1\10\4\0\6\10"+
    "\1\306\25\10\30\0\4\10\1\0\1\10\4\0\3\10"+
    "\1\307\30\10\30\0\4\10\1\0\1\10\4\0\7\10"+
    "\1\310\24\10\30\0\4\10\1\0\1\10\4\0\3\10"+
    "\1\311\30\10\30\0\4\10\1\0\1\10\4\0\2\10"+
    "\1\312\31\10\30\0\4\10\1\0\1\10\4\0\16\10"+
    "\1\313\15\10\30\0\4\10\1\0\1\10\4\0\1\314"+
    "\33\10\30\0\4\10\1\0\1\10\4\0\6\10\1\315"+
    "\25\10\30\0\4\10\1\0\1\10\4\0\30\10\1\316"+
    "\3\10\30\0\4\10\1\0\1\10\4\0\16\10\1\317"+
    "\15\10\30\0\4\10\1\0\1\10\4\0\6\10\1\320"+
    "\25\10\30\0\4\10\1\0\1\10\4\0\10\10\1\321"+
    "\23\10\30\0\4\10\1\0\1\10\4\0\16\10\1\322"+
    "\15\10\30\0\4\10\1\0\1\10\4\0\1\323\33\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\324\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\325\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\3\10\1\326\30\10"+
    "\30\0\4\10\1\0\1\10\4\0\10\10\1\327\23\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\330\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\331\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\332\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\11\10\1\333\22\10"+
    "\30\0\4\10\1\0\1\10\4\0\12\10\1\334\21\10"+
    "\30\0\4\10\1\0\1\10\4\0\16\10\1\335\15\10"+
    "\30\0\4\10\1\0\1\10\4\0\2\10\1\336\31\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\337\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\340\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\341\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\342\5\10\1\343"+
    "\25\10\30\0\4\10\1\0\1\10\4\0\1\10\1\344"+
    "\32\10\30\0\4\10\1\0\1\10\4\0\12\10\1\345"+
    "\21\10\30\0\4\10\1\0\1\10\4\0\6\10\1\346"+
    "\25\10\30\0\4\10\1\0\1\10\4\0\1\10\1\347"+
    "\32\10\30\0\4\10\1\0\1\10\4\0\5\10\1\350"+
    "\26\10\30\0\4\10\1\0\1\10\4\0\1\351\33\10"+
    "\30\0\4\10\1\0\1\10\4\0\5\10\1\352\26\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\353\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\11\10\1\354\22\10"+
    "\30\0\4\10\1\0\1\10\4\0\3\10\1\355\30\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\356\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\30\10\1\357\3\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\360\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\12\10\1\361\21\10"+
    "\30\0\4\10\1\0\1\10\4\0\4\10\1\362\27\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\363\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\24\10\1\364\7\10"+
    "\30\0\4\10\1\0\1\10\4\0\22\10\1\365\11\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\366\24\10"+
    "\22\0\4\167\1\367\1\276\70\167\5\277\1\370\70\277"+
    "\6\0\4\10\1\0\1\10\4\0\4\10\1\371\27\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\372\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\373\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\3\10\1\374\30\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\375\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\5\10\1\376\26\10"+
    "\30\0\4\10\1\0\1\10\4\0\11\10\1\377\22\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\u0100\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\u0101\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\11\10\1\u0102\22\10"+
    "\30\0\4\10\1\0\1\10\4\0\4\10\1\u0103\27\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\u0104\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\10\10\1\u0105\23\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\u0106\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\23\10\1\u0107\10\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\u0108\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\11\10\1\u0109\22\10"+
    "\30\0\4\10\1\0\1\10\4\0\2\10\1\u010a\31\10"+
    "\30\0\4\10\1\0\1\10\4\0\2\10\1\u010b\31\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\u010c\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\u010d\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\u010e\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\12\10\1\u010f\21\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\u0110\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\14\10\1\u0111\17\10"+
    "\30\0\4\10\1\0\1\10\4\0\13\10\1\u0112\20\10"+
    "\30\0\4\10\1\0\1\10\4\0\32\10\1\u0113\1\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\u0114\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\u0115\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\27\10\1\u0116\4\10"+
    "\30\0\4\10\1\0\1\10\4\0\7\10\1\u0117\24\10"+
    "\30\0\4\10\1\0\1\10\4\0\5\10\1\u0118\26\10"+
    "\30\0\4\10\1\0\1\10\4\0\12\10\1\u0119\21\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\u011a\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\16\10\1\u011b\15\10"+
    "\30\0\4\10\1\0\1\10\4\0\16\10\1\u011c\15\10"+
    "\30\0\4\10\1\0\1\10\4\0\20\10\1\u011d\13\10"+
    "\30\0\4\10\1\0\1\10\4\0\3\10\1\u011e\30\10"+
    "\30\0\4\10\1\0\1\10\4\0\1\10\1\u011f\32\10"+
    "\30\0\4\10\1\0\1\10\4\0\6\10\1\u0120\25\10"+
    "\30\0\4\10\1\0\1\10\4\0\14\10\1\u0121\1\u0122"+
    "\16\10\30\0\4\10\1\0\1\10\4\0\1\u0123\33\10"+
    "\22\0\4\277\1\300\1\370\70\277\6\0\4\10\1\0"+
    "\1\10\4\0\5\10\1\u0124\26\10\30\0\4\10\1\0"+
    "\1\10\4\0\7\10\1\u0125\24\10\30\0\4\10\1\0"+
    "\1\10\4\0\12\10\1\u0126\21\10\30\0\4\10\1\0"+
    "\1\10\4\0\6\10\1\u0127\25\10\30\0\4\10\1\0"+
    "\1\10\4\0\13\10\1\u0128\20\10\30\0\4\10\1\0"+
    "\1\10\4\0\12\10\1\u0129\21\10\30\0\4\10\1\0"+
    "\1\10\4\0\5\10\1\u012a\26\10\30\0\4\10\1\0"+
    "\1\10\4\0\13\10\1\u012b\20\10\30\0\4\10\1\0"+
    "\1\10\4\0\23\10\1\u012c\10\10\30\0\4\10\1\0"+
    "\1\10\4\0\13\10\1\u012d\20\10\30\0\4\10\1\0"+
    "\1\10\4\0\7\10\1\u012e\24\10\30\0\4\10\1\0"+
    "\1\10\4\0\2\10\1\u012f\31\10\30\0\4\10\1\0"+
    "\1\10\4\0\12\10\1\u0130\21\10\30\0\4\10\1\0"+
    "\1\10\4\0\15\10\1\u0131\16\10\30\0\4\10\1\0"+
    "\1\10\4\0\6\10\1\u0132\25\10\30\0\4\10\1\0"+
    "\1\10\4\0\6\10\1\u0133\25\10\30\0\4\10\1\0"+
    "\1\10\4\0\1\u0134\33\10\30\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\u0135\32\10\30\0\4\10\1\0\1\10"+
    "\4\0\12\10\1\u0136\21\10\30\0\4\10\1\0\1\10"+
    "\4\0\3\10\1\u0137\30\10\30\0\4\10\1\0\1\10"+
    "\4\0\13\10\1\u0138\20\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u0139\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u013a\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\12\10\1\u013b\21\10\30\0\4\10\1\0\1\10"+
    "\4\0\31\10\1\u013c\2\10\30\0\4\10\1\0\1\10"+
    "\4\0\13\10\1\u013d\20\10\30\0\4\10\1\0\1\10"+
    "\4\0\11\10\1\u013e\22\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u013f\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\12\10\1\u0140\21\10\30\0\4\10\1\0\1\10"+
    "\4\0\2\10\1\u0141\31\10\30\0\4\10\1\0\1\10"+
    "\4\0\16\10\1\u0142\15\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u0143\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\16\10\1\u0144\15\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u0145\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u0146\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\17\10\1\u0147\14\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u0148\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u0149\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\17\10\1\u014a\14\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u014b\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u014c\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\6\10\1\u014d\25\10\30\0\4\10\1\0\1\10"+
    "\4\0\16\10\1\u014e\15\10\30\0\4\10\1\0\1\10"+
    "\4\0\11\10\1\u014f\22\10\30\0\4\10\1\0\1\10"+
    "\4\0\17\10\1\u0150\14\10\30\0\4\10\1\0\1\10"+
    "\4\0\7\10\1\u0151\24\10\30\0\4\10\1\0\1\10"+
    "\4\0\12\10\1\u0152\21\10\30\0\4\10\1\0\1\10"+
    "\4\0\17\10\1\u0153\14\10\30\0\4\10\1\0\1\10"+
    "\4\0\12\10\1\u0154\21\10\30\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\u0155\32\10\30\0\4\10\1\0\1\10"+
    "\4\0\5\10\1\u0156\26\10\30\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\u0157\32\10\30\0\4\10\1\0\1\10"+
    "\4\0\2\10\1\u0158\31\10\30\0\4\10\1\0\1\10"+
    "\4\0\5\10\1\u0159\1\10\1\u015a\24\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\u015b\32\10\30\0\4\10"+
    "\1\0\1\10\4\0\13\10\1\u015c\20\10\30\0\4\10"+
    "\1\0\1\10\4\0\6\10\1\u015d\25\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\u015e\32\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\u015f\32\10\30\0\4\10"+
    "\1\0\1\10\4\0\12\10\1\u0160\21\10\30\0\4\10"+
    "\1\0\1\10\4\0\6\10\1\u0161\25\10\30\0\4\10"+
    "\1\0\1\10\4\0\30\10\1\u0162\3\10\30\0\4\10"+
    "\1\0\1\10\4\0\13\10\1\u0163\20\10\30\0\4\10"+
    "\1\0\1\10\4\0\20\10\1\u0164\13\10\30\0\4\10"+
    "\1\0\1\10\4\0\1\u0165\33\10\30\0\4\10\1\0"+
    "\1\10\4\0\13\10\1\u0166\20\10\30\0\4\10\1\0"+
    "\1\10\4\0\17\10\1\u0167\14\10\30\0\4\10\1\0"+
    "\1\10\4\0\12\10\1\u0168\21\10\30\0\4\10\1\0"+
    "\1\10\4\0\26\10\1\u0169\5\10\30\0\4\10\1\0"+
    "\1\10\4\0\12\10\1\u016a\21\10\30\0\4\10\1\0"+
    "\1\10\4\0\26\10\1\u016b\5\10\30\0\4\10\1\0"+
    "\1\10\4\0\2\10\1\u016c\31\10\30\0\4\10\1\0"+
    "\1\10\4\0\6\10\1\u016d\25\10\30\0\4\10\1\0"+
    "\1\10\4\0\26\10\1\u016e\5\10\30\0\4\10\1\0"+
    "\1\10\4\0\1\u016f\33\10\30\0\4\10\1\0\1\10"+
    "\4\0\1\u0170\33\10\30\0\4\10\1\0\1\10\4\0"+
    "\16\10\1\u0171\15\10\30\0\4\10\1\0\1\10\4\0"+
    "\16\10\1\u0172\15\10\30\0\4\10\1\0\1\10\4\0"+
    "\16\10\1\u0173\15\10\30\0\4\10\1\0\1\10\4\0"+
    "\1\10\1\u0174\32\10\30\0\4\10\1\0\1\10\4\0"+
    "\1\u0175\33\10\30\0\4\10\1\0\1\10\4\0\10\10"+
    "\1\u0176\23\10\30\0\4\10\1\0\1\10\4\0\3\10"+
    "\1\u0177\30\10\30\0\4\10\1\0\1\10\4\0\12\10"+
    "\1\u0178\21\10\30\0\4\10\1\0\1\10\4\0\6\10"+
    "\1\u0179\25\10\30\0\4\10\1\0\1\10\4\0\12\10"+
    "\1\u017a\21\10\30\0\4\10\1\0\1\10\4\0\26\10"+
    "\1\u017b\5\10\30\0\4\10\1\0\1\10\4\0\5\10"+
    "\1\u017c\26\10\30\0\4\10\1\0\1\10\4\0\1\10"+
    "\1\u017d\32\10\30\0\4\10\1\0\1\10\4\0\1\10"+
    "\1\u017e\32\10\30\0\4\10\1\0\1\10\4\0\4\10"+
    "\1\u017f\27\10\30\0\4\10\1\0\1\10\4\0\16\10"+
    "\1\u0180\15\10\30\0\4\10\1\0\1\10\4\0\13\10"+
    "\1\u0181\20\10\30\0\4\10\1\0\1\10\4\0\13\10"+
    "\1\u0182\20\10\30\0\4\10\1\0\1\10\4\0\4\10"+
    "\1\u0183\27\10\30\0\4\10\1\0\1\10\4\0\20\10"+
    "\1\u0184\13\10\30\0\4\10\1\0\1\10\4\0\1\10"+
    "\1\u0185\32\10\30\0\4\10\1\0\1\10\4\0\4\10"+
    "\1\u0186\27\10\30\0\4\10\1\0\1\10\4\0\4\10"+
    "\1\u0187\27\10\30\0\4\10\1\0\1\10\4\0\3\10"+
    "\1\u0188\30\10\30\0\4\10\1\0\1\10\4\0\17\10"+
    "\1\u0189\14\10\30\0\4\10\1\0\1\10\4\0\5\10"+
    "\1\u018a\26\10\30\0\4\10\1\0\1\10\4\0\5\10"+
    "\1\u018b\26\10\30\0\4\10\1\0\1\10\4\0\6\10"+
    "\1\u018c\25\10\30\0\4\10\1\0\1\10\4\0\10\10"+
    "\1\u018d\23\10\30\0\4\10\1\0\1\10\4\0\6\10"+
    "\1\u018e\25\10\30\0\4\10\1\0\1\10\4\0\6\10"+
    "\1\u018f\25\10\30\0\4\10\1\0\1\10\4\0\16\10"+
    "\1\u0190\15\10\30\0\4\10\1\0\1\10\4\0\13\10"+
    "\1\u0191\20\10\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\3\1\1\11\24\1\15\11"+
    "\6\1\3\11\3\1\2\0\1\11\1\0\1\11\64\1"+
    "\5\11\3\1\1\0\103\1\1\0\1\1\1\11\66\1"+
    "\1\11\1\0\231\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 119: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 120: break;
          case 3: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 121: break;
          case 4: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 122: break;
          case 5: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 123: break;
          case 6: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 124: break;
          case 7: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 125: break;
          case 8: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 126: break;
          case 9: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 127: break;
          case 10: 
            { return OpenSCADTypes.SQ_STRING_LITERAL;
            } 
            // fall through
          case 128: break;
          case 11: 
            { return OpenSCADTypes.DQ_STRING_LITERAL;
            } 
            // fall through
          case 129: break;
          case 12: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 130: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 131: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 132: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 133: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 134: break;
          case 17: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 135: break;
          case 18: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 136: break;
          case 19: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 137: break;
          case 20: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 138: break;
          case 21: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 139: break;
          case 22: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 140: break;
          case 23: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 141: break;
          case 24: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 142: break;
          case 25: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 143: break;
          case 26: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 144: break;
          case 27: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 145: break;
          case 28: 
            { return OpenSCADTypes.INCLUDE_PATH;
            } 
            // fall through
          case 146: break;
          case 29: 
            { yybegin(YYINITIAL); return OpenSCADTypes.INCLUDE_END;
            } 
            // fall through
          case 147: break;
          case 30: 
            { return OpenSCADTypes.INCLUDE_START;
            } 
            // fall through
          case 148: break;
          case 31: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 149: break;
          case 32: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 150: break;
          case 33: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 151: break;
          case 34: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 35: 
            { return OpenSCADTypes.LN_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 36: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 154: break;
          case 37: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 155: break;
          case 38: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 156: break;
          case 39: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 157: break;
          case 40: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 158: break;
          case 41: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 159: break;
          case 42: 
            { return OpenSCADTypes.CHR_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 43: 
            { return OpenSCADTypes.COS_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 44: 
            { return OpenSCADTypes.LEN_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 45: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 46: 
            { return OpenSCADTypes.LOG_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 47: 
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 48: 
            { return OpenSCADTypes.EXP_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 49: 
            { return OpenSCADTypes.SIN_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 50: 
            { return OpenSCADTypes.STR_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 51: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 52: 
            { return OpenSCADTypes.ABS_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 53: 
            { return OpenSCADTypes.TAN_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 54: 
            { return OpenSCADTypes.MIN_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 55: 
            { return OpenSCADTypes.MAX_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 56: 
            { return OpenSCADTypes.POW_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 57: 
            { return OpenSCADTypes.NORM_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 58: 
            { return OpenSCADTypes.CUBE_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 59: 
            { return OpenSCADTypes.CEIL_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 60: 
            { return OpenSCADTypes.ECHO_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 61: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 62: 
            { return OpenSCADTypes.SIGN_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 63: 
            { return OpenSCADTypes.SQRT_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 64: 
            { return OpenSCADTypes.ACOS_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 65: 
            { return OpenSCADTypes.ASIN_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 66: 
            { return OpenSCADTypes.ATAN_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 67: 
            { return OpenSCADTypes.TEXT_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 68: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 69: 
            { return OpenSCADTypes.HULL_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 70: 
            { return OpenSCADTypes.CROSS_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 71: 
            { return OpenSCADTypes.CHILD_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 72: 
            { return OpenSCADTypes.COLOR_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 73: 
            { return OpenSCADTypes.UNION_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 74: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 75: 
            { return OpenSCADTypes.SCALE_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 76: 
            { return OpenSCADTypes.FLOOR_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 77: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 78: 
            { return OpenSCADTypes.ATAN2_KEYWORD;
            } 
            // fall through
          case 196: break;
          case 79: 
            { return OpenSCADTypes.RANDS_KEYWORD;
            } 
            // fall through
          case 197: break;
          case 80: 
            { return OpenSCADTypes.ROUND_KEYWORD;
            } 
            // fall through
          case 198: break;
          case 81: 
            { return OpenSCADTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 199: break;
          case 82: 
            { return OpenSCADTypes.CIRCLE_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 83: 
            { return OpenSCADTypes.CONCAT_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 84: 
            { return OpenSCADTypes.LOOKUP_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 85: 
            { return OpenSCADTypes.SELECT_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 86: 
            { return OpenSCADTypes.SEARCH_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 87: 
            { return OpenSCADTypes.SPHERE_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 88: 
            { return OpenSCADTypes.SQUARE_KEYWORD;
            } 
            // fall through
          case 206: break;
          case 89: 
            { return OpenSCADTypes.ASSIGN_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 90: 
            { return OpenSCADTypes.ASSERT_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 91: 
            { return OpenSCADTypes.RENDER_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 92: 
            { return OpenSCADTypes.RESIZE_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 93: 
            { return OpenSCADTypes.ROTATE_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 94: 
            { return OpenSCADTypes.OFFSET_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 95: 
            { return OpenSCADTypes.MIRROR_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 96: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 97: 
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 98: 
            { return OpenSCADTypes.ELLIPSE_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 99: 
            { return OpenSCADTypes.SURFACE_KEYWORD;
            } 
            // fall through
          case 217: break;
          case 100: 
            { return OpenSCADTypes.POLYGON_KEYWORD;
            } 
            // fall through
          case 218: break;
          case 101: 
            { return OpenSCADTypes.VERSION_KEYWORD;
            } 
            // fall through
          case 219: break;
          case 102: 
            { return OpenSCADTypes.CHILDREN_KEYWORD;
            } 
            // fall through
          case 220: break;
          case 103: 
            { return OpenSCADTypes.CYLINDER_KEYWORD;
            } 
            // fall through
          case 221: break;
          case 104: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 222: break;
          case 105: 
            { return OpenSCADTypes.TRANSLATE_KEYWORD;
            } 
            // fall through
          case 223: break;
          case 106: 
            { return OpenSCADTypes.MINKOWSKI_KEYWORD;
            } 
            // fall through
          case 224: break;
          case 107: 
            { return OpenSCADTypes.IMPORT_DXF_KEYWORD;
            } 
            // fall through
          case 225: break;
          case 108: 
            { return OpenSCADTypes.IMPORT_STL_KEYWORD;
            } 
            // fall through
          case 226: break;
          case 109: 
            { return OpenSCADTypes.DIFFERENCE_KEYWORD;
            } 
            // fall through
          case 227: break;
          case 110: 
            { return OpenSCADTypes.MULTMATRIX_KEYWORD;
            } 
            // fall through
          case 228: break;
          case 111: 
            { return OpenSCADTypes.PROJECTION_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 112: 
            { return OpenSCADTypes.POLYHEDRON_KEYWORD;
            } 
            // fall through
          case 230: break;
          case 113: 
            { return OpenSCADTypes.VERSION_NUM_KEYWORD;
            } 
            // fall through
          case 231: break;
          case 114: 
            { return OpenSCADTypes.INTERSECTION_KEYWORD;
            } 
            // fall through
          case 232: break;
          case 115: 
            { return OpenSCADTypes.PARENT_MODULE_KEYWORD;
            } 
            // fall through
          case 233: break;
          case 116: 
            { return OpenSCADTypes.LINEAR_EXTRUDE_KEYWORD;
            } 
            // fall through
          case 234: break;
          case 117: 
            { return OpenSCADTypes.ROTATE_EXTRUDE_KEYWORD;
            } 
            // fall through
          case 235: break;
          case 118: 
            { return OpenSCADTypes.INTERSECTION_FOR_KEYWORD;
            } 
            // fall through
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
